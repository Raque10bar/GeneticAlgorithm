function [matrix, respuesta] = inicializaAlgoritmo(maxBpv)
    syms k;
    
    %Datos del problema
    numNodos = 55;
    minvel = 2.8;
    maxvel = 16.7;

    %Altitudes de los nodos
    altitudes = [843.700, 842.856, 847.997, 854.926, 855.005, 859.362, 869.897,...
        876.302, 856.611, 860.679, 853.672, 869.380, 852.746, 870.656, 872.439,...
        876.272, 880.134, 878.053, 856.968, 881.069, 846.437, 841.608, 845.100,...
        854.101, 841.268, 839.684, 854.552, 856.720, 857.600, 869.596, 871.380,...
        857.365, 871.125, 857.947, 869.001, 873.937, 862.789, 863.968, 880.157,...
        881.125, 877.932, 861.027, 864.188, 865.334, 866.713, 870.050, 869.550,...
        870.209, 871.403, 865.270, 865.369, 864.206, 864.628, 872.113, 879.205];

    %Array que contendrá las distancias entre nodos en formato:
    %[d(1,2)... d(1,n) d(2,3)...d(2,n) ... d(n-1, n)] siendo n el número de
    %nodos, y siendo d(i,j)=0 si i y j no están conectados entre sí.
    distancias = zeros(1, int64(symsum(k, k, 1, numNodos - 1)));

    %Como distancias tiene sus posiciones inicializadas a 0, cojo los índices
    %de los i,j que están conectados (usando el método calculaIndiceDistancia)
    indices = [1 24 55 108 125 160 164 166 168 174 211 261 278 281 310 312 314 ...
        317 363 380 404 405 496 583 666 668 683 685 706 725 782 819 820 824 871 ...
        890 891 925 958 960 1021 1080 1084 1086 1089 1097 1099 1102 1108 1135 ...
        1161 1162 1163 1189 1190 1255 1300 1315 1319 1333 1337 1346 1347 1350 ...
        1356 1366 1374 1394 1395 1408 1420 1427 1428 1431 1450 1458 1462 1463 ...
        1466 1471 1481];

    %Array con las distancias entre los nodos que están conectados, de menor a
    %mayor
    distAux = [242.12, 159.36, 190.47, 494.22 261.53 764.65 729.67 587.11 535.65 ...
        60.83 141.08 199.04 159.55 203.50 372.15 149.47 21.19 515.04 344.53 ...
        391.56 88.98 158.01 180.10 196.35 79.99 102.90 405.60 352.57 119.52 ...
        135.81 187.79 278.17 1010.00 721.60 118.43 470.18 219.06 55.68 262.23 ...
        116.74 175.82 83.69 126.91 170.04 265.41 517.43 574.07 478.61 133.77 ...
        164.48 73.62 269.70 18.86 197.83 549.21 251.71 91.77 188.18 62.51 322.37 ...
        30.02 17.17 56.21 31.56 298.67 188.13 189.83 323.96 90.22 59.23 158.44 ...
        72.34 32.51 78.24 30.46 40.31 257.12 36.74 137.53 31.78 216.37];

    %Coloco las distancias en las posiciones correspondientes
    distancias(indices) = distAux;

    matrix = creaMatrizDistancias(distancias, numNodos);
    [mina, maxa] = aceleracionMinYMax(maxBpv);
    matrix = calculaAngulos(mina, maxa, altitudes, matrix);

    if ~hayAlgunaRuta(matrix, numNodos)
        matrix = [];
        respuesta = ['No hay ninguna ruta al hospital que mantenga la variación de la' ...
        ' presión sanguínea del paciente dentro del límite establecido. Puede' ....
        ' aumentar el límite para considerar rutas que han sido descartadas para' ...
        ' este.'];
    else
        matrix = calculaMatrizPesos(mina, maxa, minvel, maxvel, matrix);
        respuesta = 'La matriz de pesos se ha calculado correctamente.';
    end
end